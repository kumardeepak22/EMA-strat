from kiteconnect import KiteConnect, KiteTicker
import json
import os
import pyotp
import pandas as pd
import requests
import datetime as dt
from jugaad_trader import Zerodha as jugaad_zerodha
# from utilities import utility 
urls = {'base_url':"https://kite.zerodha.com",'login_url':"https://kite.zerodha.com/api/login",
'twofa_url':"https://kite.zerodha.com/api/twofa",'instruments_url':"https://api.kite.tbrade/instruments"}

class Zerodha():
    def __init__(self,creds):
        '''
        Class constructor for Zerodha object

        Parameters:
        creds (dict): credentials for Zerodha API
        '''
        self.creds = creds
        #self.zerodha_login()
        self.zerodha_login()
        self.kite1 = self.jugaad_login()
        self.execution_symbols=None
        self.strategy_symbols=None
        self.instruments = pd.DataFrame(self.kite.instruments())
    def jugaad_login(self):
        '''
        Function to login to Zerodha using Jugaad Trader library
        (using it as I dont have historical api to fetch historical data for now)
        Returns:
        Zerodha object
        '''
        kite1 = jugaad_zerodha()
        kite1.user_id=self.creds['user_id']
        kite1.password = self.creds['password']
        json_res = kite1.login_step1()
        twofa = pyotp.TOTP(self.creds['totp_key']).now()
        kite1.twofa=twofa
        json_res_1 = kite1.login_step2(json_res)
        kite1.enc_token = kite1.r.cookies['enctoken']
        return kite1
    def generate_access_token(self):
        '''
        Function to generate access token for Zerodha API

        Returns:
        str: access token
        '''
        file_path = r'./broker/access_token.json'
        
        try:
            with open(file_path, "r") as f:
                data = json.load(f)
        except FileNotFoundError:
            data = {"timestamp": "", "access_token": ""}
        today = dt.datetime.now().strftime("%Y-%m-%d")
        if (data["timestamp"] != today):
            session = requests.Session()
            response = session.post(urls['login_url'],data={'user_id':self.creds['user_id'],'password':self.creds['password']})
            resp_json = json.loads(response.text)
            request_id = resp_json['data']['request_id']
            twofa = pyotp.TOTP(self.creds['totp_key']).now()
            response1 = session.post(urls['twofa_url'],data={'user_id':self.creds['user_id'],'request_id':request_id,'twofa_value':twofa})
            enc_token = response1.cookies['enctoken']
            response1_json = json.loads(response1.text)
            kite  = KiteConnect(api_key=self.creds['api_key'])
            try:
                session.get(kite.login_url())
            except Exception as e:
                e_msg = str(e)
                request_token = e_msg.split('request_token=')[1].split(' ')[0].split('&action')[0]
            access_token = kite.generate_session(request_token,self.creds['api_secret'])['access_token']
            data["timestamp"] = today
            data["access_token"] = access_token

            # save the new token to the JSON file
            with open(file_path, "w") as f:
                json.dump(data, f)
        else:
            access_token = data["access_token"]
        return data['access_token']
        # Check the date when was the last token generated by reading access_token.json
        # If current date is not the one read from the access_token.json, then only  generate new access_token


    def zerodha_login(self):
        # function to login to Zerodha API using the generated access token
        access_token = self.generate_access_token()
        self.kite =  KiteConnect(api_key=self.creds['api_key'])
        self.kite.set_access_token(access_token)
        self.kws =KiteTicker(api_key = self.creds['api_key'], access_token = access_token)
